[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/account.js",
    "content": "// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey: ?Buffer = null) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Account",
    "memberof": "src/account.js",
    "static": true,
    "longname": "src/account.js~Account",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Account}",
    "description": "An account key pair (public and secret keys).",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "_keypair",
    "memberof": "src/account.js~Account",
    "static": false,
    "longname": "src/account.js~Account#_keypair",
    "access": "private",
    "description": "",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "KeyPair"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#constructor",
    "access": "public",
    "description": "Create a new Account object\n\nIf the secretKey parameter is not provided a new key pair is randomly\ncreated for the account ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "secretKey",
        "description": "Secret key for the account"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "get",
    "name": "publicKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#publicKey",
    "access": "public",
    "description": "The public key for this account ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "get",
    "name": "secretKey",
    "memberof": "src/account.js~Account",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/account.js~Account#secretKey",
    "access": "public",
    "description": "The **unencrypted** secret key for this account ",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/blockhash.js",
    "content": "// @flow\n\n/**\n * @typedef {string} Blockhhash\n */\nexport type Blockhash = string;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/blockhash.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "Blockhhash",
    "memberof": "src/blockhash.js",
    "static": true,
    "longname": "src/blockhash.js~Blockhhash",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "Blockhhash"
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/bpf-loader.js",
    "content": "// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Public key that identifies the BpfLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('BPFLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program into\n   * @param elfBytes The entire ELF containing the BPF program\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    elf: Array<number>,\n  ): Promise<PublicKey> {\n    const program = new Account();\n    return Loader.load(connection, payer, program, BpfLoader.programId, elf);\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/bpf-loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "BpfLoader",
    "memberof": "src/bpf-loader.js",
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BpfLoader}",
    "description": "Factory class for transactions to interact with a program loader",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "get",
    "name": "programId",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.programId",
    "access": "public",
    "description": "Public key that identifies the BpfLoader ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getMinNumSignatures",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.getMinNumSignatures",
    "access": "public",
    "description": "Minimum number of signatures required to load a program not including\nretries\n\nCan be used to calculate transaction fees  ",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "load",
    "memberof": "src/bpf-loader.js~BpfLoader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bpf-loader.js~BpfLoader.load",
    "access": "public",
    "description": "Load a BPF program  ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "payer",
        "description": "User account to load the program into"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "elf",
        "description": "The entire ELF containing the BPF program"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/budget-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\n\n/**\n * Represents a condition that is met by executing a `applySignature()`\n * transaction\n *\n * @typedef {Object} SignatureCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applySignature()` will be accepted from\n */\nexport type SignatureCondition = {\n  type: 'signature',\n  from: PublicKey,\n};\n\n/**\n * Represents a condition that is met by executing a `applyTimestamp()`\n * transaction\n *\n * @typedef {Object} TimestampCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applyTimestamp()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCondition = {\n  type: 'timestamp',\n  from: PublicKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of lamports\n * @property {PublicKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PublicKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCondition|TimestampCondition} BudgetCondition\n */\nexport type BudgetCondition = SignatureCondition | TimestampCondition;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeDate(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCondition(condition: BudgetCondition) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeDate(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      data.writeUInt32LE(1, 0); // Condition enum = Signature\n      from.copy(data, 4);\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetProgram {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get space(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static timestampCondition(from: PublicKey, when: Date): TimestampCondition {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCondition(from: PublicKey): SignatureCondition {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once any of the conditions are met\n   */\n  static pay(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    ...conditions: Array<BudgetCondition>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0: {\n        data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [\n            {pubkey: to, isSigner: false, isWritable: true},\n            {pubkey: program, isSigner: false, isWritable: true},\n          ],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n      case 1: {\n        data.writeUInt32LE(1, pos); // BudgetExpr enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isWritable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      case 2: {\n        data.writeUInt32LE(2, pos); // BudgetExpr enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isWritable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are supported: ${conditions.length} provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once both conditions are met\n   */\n  static payOnBoth(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    condition1: BudgetCondition,\n    condition2: BudgetCondition,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    data.writeUInt32LE(3, pos); // BudgetExpr enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCondition(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n    pos += 4;\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    const trimmedData = data.slice(0, pos);\n\n    const transaction = SystemProgram.createAccount(\n      from,\n      program,\n      amount,\n      trimmedData.length,\n      this.programId,\n    );\n\n    return transaction.add({\n      keys: [{pubkey: program, isSigner: false, isWritable: true}],\n      programId: this.programId,\n      data: trimmedData,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static applyTimestamp(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeDate(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: program, isSigner: false, isWritable: true},\n        {pubkey: to, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static applySignature(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: program, isSigner: false, isWritable: true},\n        {pubkey: to, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/budget-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "SignatureCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~SignatureCondition",
    "access": "public",
    "description": "Represents a condition that is met by executing a `applySignature()`\ntransaction",
    "lineNumber": 17,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Must equal the string 'timestamp'"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Public key from which `applySignature()` will be accepted from"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureCondition"
    }
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "TimestampCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~TimestampCondition",
    "access": "public",
    "description": "Represents a condition that is met by executing a `applyTimestamp()`\ntransaction",
    "lineNumber": 31,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Must equal the string 'timestamp'"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "Public key from which `applyTimestamp()` will be accepted from"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": "The timestamp that was observed"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TimestampCondition"
    }
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "Payment",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~Payment",
    "access": "public",
    "description": "Represents a payment to a given public key",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Number of lamports"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Public key of the recipient"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Payment"
    }
  },
  {
    "__docId__": 67,
    "kind": "typedef",
    "name": "BudgetCondition",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~BudgetCondition",
    "access": "public",
    "description": "A condition that can unlock a payment",
    "lineNumber": 54,
    "type": {
      "types": [
        "SignatureCondition",
        "TimestampCondition"
      ],
      "optional": false,
      "name": "BudgetCondition"
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "serializePayment",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializePayment",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "  ",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Payment"
        ],
        "spread": false,
        "optional": false,
        "name": "payment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "serializeDate",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializeDate",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "  ",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "serializeCondition",
    "memberof": "src/budget-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~serializeCondition",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "BudgetProgram",
    "memberof": "src/budget-program.js",
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{BudgetProgram}",
    "description": "Factory class for transactions to interact with the Budget program",
    "lineNumber": 131,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "get",
    "name": "programId",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.programId",
    "access": "public",
    "description": "Public key that identifies the Budget program ",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "get",
    "name": "space",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.space",
    "access": "public",
    "description": "The amount of space this program requires ",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "timestampCondition",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.timestampCondition",
    "access": "public",
    "description": "Creates a timestamp condition  ",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TimestampCondition"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "signatureCondition",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.signatureCondition",
    "access": "public",
    "description": "Creates a signature condition  ",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignatureCondition"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "pay",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.pay",
    "access": "public",
    "description": "Generates a transaction that transfers lamports once any of the conditions are met  ",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...Array<BudgetCondition>"
        ],
        "spread": true,
        "optional": false,
        "name": "conditions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "payOnBoth",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.payOnBoth",
    "access": "public",
    "description": "Generates a transaction that transfers lamports once both conditions are met  ",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "BudgetCondition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "applyTimestamp",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.applyTimestamp",
    "access": "public",
    "description": "Generates a transaction that applies a timestamp, which could enable a\npending payment to proceed.  ",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "when",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "applySignature",
    "memberof": "src/budget-program.js~BudgetProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/budget-program.js~BudgetProgram.applySignature",
    "access": "public",
    "description": "Generates a transaction that applies a signature, which could enable a\npending payment to proceed.  ",
    "lineNumber": 365,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/connection.js",
    "content": "// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from './timing';\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {sleep} from './util/sleep';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcResponseAndContext<T> = {\n  context: {\n    slot: number,\n  },\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return struct.union([\n    // those same methods return results with context in v0.21+ servers\n    jsonRpcResult({\n      context: struct({\n        slot: 'number',\n      }),\n      value: resultDescription,\n    }),\n    // selected methods return \"bare\" results in pre-v0.21 servers\n    jsonRpcResult(resultDescription),\n  ]);\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * The level of commitment desired when querying state\n *   'max':    Query the most recent block which has reached max voter lockout\n *   'recent': Query the most recent block\n *\n * @typedef {'max' | 'recent'} Commitment\n */\nexport type Commitment = 'max' | 'recent';\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string} gossip Gossip network address for the node\n * @property {string} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation parameters\n * (see https://docs.solana.com/book/v/master/implemented-proposals/ed_overview)\n *\n * @typedef {Object} Inflation\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} storage\n * @property {number} taper\n * @property {number} terminal\n */\nconst GetInflationResult = struct({\n  foundation: 'number',\n  foundation_term: 'number',\n  initial: 'number',\n  storage: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * EpochInfo parameters\n * (see https://docs.solana.com/book/v/master/terminology#epoch)\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n */\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n});\n\n/**\n * EpochSchedule parameters\n * (see https://docs.solana.com/book/v/master/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slots_per_epoch\n * @property {number} leader_schedule_slot_offset\n * @property {boolean} warmup\n * @property {number} first_normal_epoch\n * @property {number} first_normal_slot\n */\nconst GetEpochScheduleResult = struct({\n  slots_per_epoch: 'number',\n  leader_schedule_slot_offset: 'number',\n  warmup: 'boolean',\n  first_normal_epoch: 'number',\n  first_normal_slot: 'number',\n});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct({\n  'solana-core': 'string',\n});\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<Array<object>>} transactions Vector of transactions paired with statuses\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<[Transaction, GetSignatureStatusRpcResult]>,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflation\" message\n */\nconst GetInflationRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'array',\n  lamports: 'number',\n  data: 'array',\n  rent_epoch: 'number?',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct(['string', AccountInfoResult]);\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: ProgramAccountInfoResult,\n});\n\n/**\n * @private\n */\nconst SlotInfo = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/***\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfo,\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.list([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"confirmTransaction\" message\n */\nconst ConfirmTransactionAndContextRpcResult = jsonRpcResultAndContext(\n  'boolean',\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.list([\n    struct({\n      pubkey: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n/**\n * @ignore\n */\nconst GetClusterNodes_015 = jsonRpcResult(\n  struct.list([\n    struct({\n      id: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.list([\n      struct({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.list([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.list([\n      struct({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.list([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\nconst SignatureStatusResult = struct.union([\n  'null',\n  struct.union([struct({Ok: 'null'}), struct({Err: 'object'})]),\n]);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatus\" message\n */\nconst GetSignatureStatusRpcResult = jsonRpcResult(SignatureStatusResult);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct({\n    blockhash: struct.list(['number']),\n    previousBlockhash: struct.list(['number']),\n    parentSlot: 'number',\n    transactions: struct.list([\n      struct.tuple([\n        struct({\n          signatures: struct.list([struct.list(['number'])]),\n          message: struct({\n            accountKeys: struct.list([struct.list(['number'])]),\n            header: struct({\n              numRequiredSignatures: 'number',\n              numReadonlySignedAccounts: 'number',\n              numReadonlyUnsignedAccounts: 'number',\n            }),\n            instructions: struct.list([\n              struct.union([\n                struct.list(['number']),\n                struct({\n                  accounts: struct.list([\n                    struct.union([struct.list(['number']), 'number']),\n                  ]),\n                  data: struct.list([\n                    struct.union([struct.list(['number']), 'number']),\n                  ]),\n                  programIdIndex: 'number',\n                }),\n              ]),\n            ]),\n            recentBlockhash: struct.list(['number']),\n          }),\n        }),\n        struct.union([\n          'null',\n          struct({\n            status: SignatureStatusResult,\n            fee: 'number',\n          }),\n        ]),\n      ]),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext([\n  'string',\n  struct({\n    burnPercent: 'number',\n    lamportsPerSignature: 'number',\n    maxLamportsPerSignature: 'number',\n    minLamportsPerSignature: 'number',\n    targetLamportsPerSignature: 'number',\n    targetSignaturesPerSlot: 'number',\n  }),\n]);\n\n/**\n * @ignore\n */\nconst GetRecentBlockhash_016 = jsonRpcResult([\n  'string',\n  struct({\n    lamportsPerSignature: 'number',\n    maxLamportsPerSignature: 'number',\n    minLamportsPerSignature: 'number',\n    targetLamportsPerSignature: 'number',\n    targetSignaturesPerSlot: 'number',\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {?Buffer} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: Buffer,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (accountInfo: AccountInfo) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Signature status: Success\n *\n * @typedef {Object} SignatureSuccess\n */\nexport type SignatureSuccess = {|\n  Ok: null,\n|};\n\n/**\n * Signature status: TransactionError\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {|\n  Err: Object,\n|};\n\n/**\n * @ignore\n */\ntype BlockhashAndFeeCalculator = [Blockhash, FeeCalculator]; // This type exists to workaround an esdoc parse error\n\n/**\n * @ignore\n */\ntype PublicKeyAndAccount = [PublicKey, AccountInfo]; // This type exists to workaround an esdoc parse error\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._argsWithCommitment([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const isV021 =\n      typeof res.result.context !== 'undefined' &&\n      typeof res.result.value !== 'undefined';\n\n    if (isV021) {\n      return res.result;\n    } else {\n      return {\n        context: {\n          slot: NaN,\n        },\n        value: res.result,\n      };\n    }\n  }\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo>> {\n    const args = this._argsWithCommitment([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const isV021 =\n      typeof res.result.context !== 'undefined' &&\n      typeof res.result.value !== 'undefined';\n\n    const slot = isV021 ? res.result.context.slot : NaN;\n    const resultValue = isV021 ? res.result.value : res.result;\n\n    if (!resultValue) {\n      throw new Error('Invalid request');\n    }\n\n    const {executable, owner, lamports, data} = resultValue;\n    const value = {\n      executable,\n      owner: new PublicKey(owner),\n      lamports,\n      data: Buffer.from(data),\n    };\n\n    return {\n      context: {\n        slot,\n      },\n      value,\n    };\n  }\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<PublicKeyAndAccount>> {\n    const args = this._argsWithCommitment([programId.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      return [\n        result[0],\n        {\n          executable: result[1].executable,\n          owner: new PublicKey(result[1].owner),\n          lamports: result[1].lamports,\n          data: Buffer.from(result[1].data),\n        },\n      ];\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confirmTransactionAndContext(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const args = this._argsWithCommitment([signature], commitment);\n    const unsafeRes = await this._rpcRequest('confirmTransaction', args);\n    const res = ConfirmTransactionAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const isV021 =\n      typeof res.result.context !== 'undefined' &&\n      typeof res.result.value !== 'undefined';\n\n    if (isV021) {\n      return res.result;\n    } else {\n      return {\n        context: {\n          slot: NaN,\n        },\n        value: res.result,\n      };\n    }\n  }\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<boolean> {\n    return await this.confirmTransactionAndContext(signature, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetClusterNodes_015(unsafeRes);\n      if (res_015.error) {\n        console.log('no', res_015.error);\n        throw new Error(res_015.error.message);\n      }\n      return res_015.result.map(node => {\n        node.pubkey = node.id;\n        node.id = undefined;\n        return node;\n      });\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<SignatureSuccess | TransactionError | null> {\n    const args = this._argsWithCommitment([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getSignatureStatus', args);\n    const res = GetSignatureStatusRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster Inflation parameters\n   */\n  async getInflation(commitment: ?Commitment): Promise<GetInflationRpcResult> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflation', args);\n    const res = GetInflationRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<GetEpochInfoRpcResult> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<GetEpochScheduleRpcResult> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._argsWithCommitment([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashAndFeeCalculator>> {\n    const args = this._argsWithCommitment([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    // Legacy v0.16 response.  TODO: Remove in September 2019\n    try {\n      const res_016 = GetRecentBlockhash_016(unsafeRes);\n      if (res_016.error) {\n        throw new Error(res_016.error.message);\n      }\n      const [blockhash, feeCalculator] = res_016.result;\n      feeCalculator.burnPercent = 0;\n\n      return {\n        context: {\n          slot: NaN,\n        },\n        value: [blockhash, feeCalculator],\n      };\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.16 response\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const isV021 =\n      typeof res.result.context !== 'undefined' &&\n      typeof res.result.value !== 'undefined';\n\n    if (isV021) {\n      return res.result;\n    } else {\n      return {\n        context: {\n          slot: NaN,\n        },\n        value: res.result,\n      };\n    }\n  }\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<BlockhashAndFeeCalculator> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw e;\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const result = GetConfirmedBlockRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(result.error.message);\n    }\n    assert(typeof result.result !== 'undefined');\n    return {\n      blockhash: new PublicKey(result.result.blockhash).toString(),\n      previousBlockhash: new PublicKey(\n        result.result.previousBlockhash,\n      ).toString(),\n      parentSlot: result.result.parentSlot,\n      transactions: result.result.transactions.map(result => {\n        return [Transaction.fromRpcResult(result[0]), result[1]];\n      }),\n    };\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n    commitment: ?Commitment,\n  ): Promise<TransactionSignature> {\n    const args = this._argsWithCommitment([to.toBase58(), amount], commitment);\n    const unsafeRes = await this._rpcRequest('requestAirdrop', args);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    ...signers: Array<Account>\n  ): Promise<TransactionSignature> {\n    for (;;) {\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const seconds = new Date().getSeconds();\n      if (\n        this._blockhashInfo.recentBlockhash != null &&\n        this._blockhashInfo.seconds < seconds + 30\n      ) {\n        transaction.recentBlockhash = this._blockhashInfo.recentBlockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString();\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          if (this._disableBlockhashCaching) {\n            this._blockhashInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      // Fetch a new blockhash\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const [\n          recentBlockhash,\n          //feeCalculator,\n        ] = await this.getRecentBlockhash();\n\n        if (this._blockhashInfo.recentBlockhash != recentBlockhash) {\n          this._blockhashInfo = {\n            recentBlockhash,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 50) {\n          throw new Error(\n            `Unable to obtain a new blockhash after ${Date.now() -\n              startTime}ms`,\n          );\n        }\n\n        // Sleep for approximately half a slot\n        await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('sendTransaction', [\n      [...rawTransaction],\n    ]);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSocket.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    } else {\n      // Only after an explicit close do we need to explicitly connect again\n      this._rpcWebSocketConnected = false;\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0\n    ) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of programKeys) {\n        this._programAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of slotKeys) {\n        this._slotSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const {subscriptionId, publicKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('accountSubscribe', [\n            publicKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${publicKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of programKeys) {\n      const {\n        subscriptionId,\n        programId,\n      } = this._programAccountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._programAccountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('programSubscribe', [\n            programId,\n          ]);\n        } catch (err) {\n          console.log(\n            `programSubscribe error for ${programId}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of slotKeys) {\n      const {subscriptionId} = this._slotSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._slotSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('slotSubscribe', []);\n        } catch (err) {\n          console.log(`slotSubscribe error: ${err.message}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PublicKey(result.owner),\n          lamports: result.lamports,\n          data: Buffer.from(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result[0],\n          accountInfo: {\n            executable: result[1].executable,\n            owner: new PublicKey(result[1].owner),\n            lamports: result[1].lamports,\n            data: Buffer.from(result[1].data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('programUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('programUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: id,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const {subscriptionId} = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('slotUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('slotUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _argsWithCommitment(args: Array<any>, override: ?Commitment): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment) {\n      args.push({commitment});\n    }\n    return args;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "jsonRpcResultAndContext",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~jsonRpcResultAndContext",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "jsonRpcResult",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~jsonRpcResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "resultDescription",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "typedef",
    "name": "Commitment",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Commitment",
    "access": "public",
    "description": "The level of commitment desired when querying state\n  'max':    Query the most recent block which has reached max voter lockout\n  'recent': Query the most recent block",
    "lineNumber": 72,
    "type": {
      "types": [
        "'max' ",
        " 'recent'"
      ],
      "optional": false,
      "name": "Commitment"
    }
  },
  {
    "__docId__": 84,
    "kind": "typedef",
    "name": "ContactInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ContactInfo",
    "access": "public",
    "description": "Information describing a cluster node",
    "lineNumber": 83,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pubkey",
        "description": "Identity public key of the node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "gossip",
        "description": "Gossip network address for the node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tpu",
        "description": "TPU network address for the node (null if not available)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "rpc",
        "description": "JSON RPC network address for the node (null if not available)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ContactInfo"
    }
  },
  {
    "__docId__": 85,
    "kind": "typedef",
    "name": "VoteAccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~VoteAccountInfo",
    "access": "public",
    "description": "Information describing a vote account",
    "lineNumber": 102,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "votePubkey",
        "description": "Public key of the vote account"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePubkey",
        "description": "Identity public key of the node voting with this account"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "activatedStake",
        "description": "The stake, in lamports, delegated to this vote account and activated"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "epochVoteAccount",
        "description": "Whether the vote account is staked for this epoch"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "epochCredits",
        "description": "Recent epoch voting credit history for this voter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "commission",
        "description": "A percentage (0-100) of rewards payout owed to the voter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lastVote",
        "description": "Most recent slot voted on by this vote account"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VoteAccountInfo"
    }
  },
  {
    "__docId__": 86,
    "kind": "typedef",
    "name": "VoteAccountStatus",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~VoteAccountStatus",
    "access": "public",
    "description": "A collection of cluster vote accounts",
    "lineNumber": 119,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<VoteAccountInfo>"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "Active vote accounts"
      },
      {
        "nullable": null,
        "types": [
          "Array<VoteAccountInfo>"
        ],
        "spread": false,
        "optional": false,
        "name": "delinquent",
        "description": "Inactive vote accounts"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VoteAccountStatus"
    }
  },
  {
    "__docId__": 87,
    "kind": "typedef",
    "name": "Inflation",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Inflation",
    "access": "public",
    "description": "Network Inflation parameters\n(see https://docs.solana.com/book/v/master/implemented-proposals/ed_overview)",
    "lineNumber": 136,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "foundation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "foundation_term",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "storage",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "taper",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "terminal",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Inflation"
    }
  },
  {
    "__docId__": 88,
    "kind": "typedef",
    "name": "EpochInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~EpochInfo",
    "access": "public",
    "description": "EpochInfo parameters\n(see https://docs.solana.com/book/v/master/terminology#epoch)",
    "lineNumber": 155,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slotIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slotsInEpoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "absoluteSlot",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EpochInfo"
    }
  },
  {
    "__docId__": 89,
    "kind": "typedef",
    "name": "EpochSchedule",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~EpochSchedule",
    "access": "public",
    "description": "EpochSchedule parameters\n(see https://docs.solana.com/book/v/master/terminology#epoch)",
    "lineNumber": 173,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slots_per_epoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "leader_schedule_slot_offset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "warmup",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first_normal_epoch",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "first_normal_slot",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EpochSchedule"
    }
  },
  {
    "__docId__": 90,
    "kind": "typedef",
    "name": "Version",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Version",
    "access": "public",
    "description": "Version info for a node",
    "lineNumber": 187,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "solana-core",
        "description": "Version of solana-core"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Version"
    }
  },
  {
    "__docId__": 91,
    "kind": "typedef",
    "name": "ConfirmedBlock",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmedBlock",
    "access": "public",
    "description": "A ConfirmedBlock on the ledger",
    "lineNumber": 200,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "blockhash",
        "description": "Blockhash of this block"
      },
      {
        "nullable": null,
        "types": [
          "Blockhash"
        ],
        "spread": false,
        "optional": false,
        "name": "previousBlockhash",
        "description": "Blockhash of this block's parent"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "parentSlot",
        "description": "Slot index of this block's parent"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<object>>"
        ],
        "spread": false,
        "optional": false,
        "name": "transactions",
        "description": "Vector of transactions paired with statuses"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfirmedBlock"
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "createRpcRequest",
    "memberof": "src/connection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/connection.js~createRpcRequest",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "GetInflationRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetInflationRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getInflation\" message",
    "lineNumber": 242,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "GetEpochInfoRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochInfoRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getEpochInfo\" message",
    "lineNumber": 252,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "GetEpochScheduleRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetEpochScheduleRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getEpochSchedule\" message",
    "lineNumber": 262,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "GetBalanceAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetBalanceAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getBalance\" message",
    "lineNumber": 272,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "GetVersionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetVersionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getVersion\" message",
    "lineNumber": 277,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "AccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 287,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "GetAccountInfoAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetAccountInfoAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getAccountInfo\" message",
    "lineNumber": 298,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "AccountNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"accountNotification\" message",
    "lineNumber": 305,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "ProgramAccountInfoResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ProgramAccountInfoResult",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 313,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "ProgramAccountNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ProgramAccountNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"programNotification\" message",
    "lineNumber": 318,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "SlotInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotInfo",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 326,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "SlotNotificationResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SlotNotificationResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"slotNotification\" message",
    "lineNumber": 335,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "GetProgramAccountsRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetProgramAccountsRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getProgramAccounts\" message",
    "lineNumber": 343,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "ConfirmTransactionAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~ConfirmTransactionAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"confirmTransaction\" message",
    "lineNumber": 350,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "GetSlot",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSlot",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSlot\" message",
    "lineNumber": 357,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "GetSlotLeader",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSlotLeader",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSlotLeader\" message",
    "lineNumber": 362,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "GetClusterNodes",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetClusterNodes",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getClusterNodes\" message",
    "lineNumber": 367,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "GetClusterNodes_015",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetClusterNodes_015",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 380,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "GetVoteAccounts",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetVoteAccounts",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getVoteAccounts\" message",
    "lineNumber": 394,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "SignatureStatusResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureStatusResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "GetSignatureStatusRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetSignatureStatusRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getSignatureStatus\" message",
    "lineNumber": 435,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "GetTransactionCountRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTransactionCountRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTransactionCount\" message",
    "lineNumber": 440,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "GetTotalSupplyRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetTotalSupplyRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getTotalSupply\" message",
    "lineNumber": 445,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "GetMinimumBalanceForRentExemptionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetMinimumBalanceForRentExemptionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message",
    "lineNumber": 450,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "GetConfirmedBlockRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetConfirmedBlockRpcResult",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{GetConfirmedBlockRpcResult}",
    "description": "Expected JSON RPC response for the \"getConfirmedBlock\" message",
    "lineNumber": 455,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "GetRecentBlockhashAndContextRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetRecentBlockhashAndContextRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"getRecentBlockhash\" message",
    "lineNumber": 503,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "GetRecentBlockhash_016",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~GetRecentBlockhash_016",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 518,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "RequestAirdropRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~RequestAirdropRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"requestAirdrop\" message",
    "lineNumber": 532,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "SendTransactionRpcResult",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SendTransactionRpcResult",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Expected JSON RPC response for the \"sendTransaction\" message",
    "lineNumber": 537,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "typedef",
    "name": "AccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~AccountInfo",
    "access": "public",
    "description": "Information describing an account",
    "lineNumber": 548,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": "Number of lamports assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Identifier of the program that owns the account"
      },
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Optional data assigned to the account"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": "`true` if this account's data contains a loaded program"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AccountInfo"
    }
  },
  {
    "__docId__": 123,
    "kind": "typedef",
    "name": "KeyedAccountInfo",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~KeyedAccountInfo",
    "access": "public",
    "description": "Account information identified by pubkey",
    "lineNumber": 562,
    "properties": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "accountId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AccountInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "accountInfo",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "KeyedAccountInfo"
    }
  },
  {
    "__docId__": 124,
    "kind": "typedef",
    "name": "SignatureSuccess",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~SignatureSuccess",
    "access": "public",
    "description": "Signature status: Success",
    "lineNumber": 615,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SignatureSuccess"
    }
  },
  {
    "__docId__": 125,
    "kind": "typedef",
    "name": "TransactionError",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~TransactionError",
    "access": "public",
    "description": "Signature status: TransactionError",
    "lineNumber": 624,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionError"
    }
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "Connection",
    "memberof": "src/connection.js",
    "static": true,
    "longname": "src/connection.js~Connection",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Connection}",
    "description": "A connection to a fullnode JSON RPC endpoint",
    "lineNumber": 641,
    "interface": false
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "_rpcRequest",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcRequest",
    "access": "private",
    "description": "",
    "lineNumber": 642,
    "type": {
      "nullable": null,
      "types": [
        "RpcRequest"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "_rpcWebSocket",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocket",
    "access": "private",
    "description": "",
    "lineNumber": 643,
    "type": {
      "nullable": null,
      "types": [
        "RpcWebSocketClient"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "_rpcWebSocketConnected",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_rpcWebSocketConnected",
    "access": "private",
    "description": "",
    "lineNumber": 644,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_commitment",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_commitment",
    "access": "private",
    "description": "",
    "lineNumber": 646,
    "type": {
      "nullable": true,
      "types": [
        "Commitment"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "_blockhashInfo",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_blockhashInfo",
    "access": "private",
    "description": "",
    "lineNumber": 647,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_disableBlockhashCaching",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_disableBlockhashCaching",
    "access": "private",
    "description": "",
    "lineNumber": 652,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_accountChangeSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 653,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_accountChangeSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_accountChangeSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 654,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_programAccountChangeSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_programAccountChangeSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 655,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "_programAccountChangeSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_programAccountChangeSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 658,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "_slotSubscriptions",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_slotSubscriptions",
    "access": "private",
    "description": "",
    "lineNumber": 659,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "_slotSubscriptionCounter",
    "memberof": "src/connection.js~Connection",
    "static": false,
    "longname": "src/connection.js~Connection#_slotSubscriptionCounter",
    "access": "private",
    "description": "",
    "lineNumber": 662,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#constructor",
    "access": "public",
    "description": "Establish a JSON RPC connection ",
    "lineNumber": 670,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "URL to the fullnode JSON RPC endpoint"
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": "optional default commitment level"
      }
    ]
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "getBalanceAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBalanceAndContext",
    "access": "public",
    "description": "Fetch the balance for the specified public key  ",
    "lineNumber": 711,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<number>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getBalance",
    "access": "public",
    "description": " ",
    "lineNumber": 738,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "getAccountInfoAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getAccountInfoAndContext",
    "access": "public",
    "description": "Fetch all the account info for the specified public key  ",
    "lineNumber": 752,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<AccountInfo>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getAccountInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getAccountInfo",
    "access": "public",
    "description": " ",
    "lineNumber": 790,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<AccountInfo>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getProgramAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getProgramAccounts",
    "access": "public",
    "description": "Fetch all the accounts owned by the specified program id  ",
    "lineNumber": 804,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<PublicKeyAndAccount>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "confirmTransactionAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#confirmTransactionAndContext",
    "access": "public",
    "description": "Confirm the transaction identified by the specified signature  ",
    "lineNumber": 834,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<boolean>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "confirmTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#confirmTransaction",
    "access": "public",
    "description": " ",
    "lineNumber": 861,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "getClusterNodes",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getClusterNodes",
    "access": "public",
    "description": "Return the list of nodes that are currently participating in the cluster  ",
    "lineNumber": 875,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<ContactInfo>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "getVoteAccounts",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getVoteAccounts",
    "access": "public",
    "description": "Return the list of nodes that are currently participating in the cluster  ",
    "lineNumber": 906,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<VoteAccountStatus>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "getSlot",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSlot",
    "access": "public",
    "description": "Fetch the current slot that the node is processing  ",
    "lineNumber": 921,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "getSlotLeader",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSlotLeader",
    "access": "public",
    "description": "Fetch the current slot leader of the cluster  ",
    "lineNumber": 935,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getSignatureStatus",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getSignatureStatus",
    "access": "public",
    "description": "Fetch the current transaction count of the cluster  ",
    "lineNumber": 949,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionSignature"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<SignatureSuccess|TransactionError|nullliteral>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getTransactionCount",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTransactionCount",
    "access": "public",
    "description": "Fetch the current transaction count of the cluster  ",
    "lineNumber": 966,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "getTotalSupply",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getTotalSupply",
    "access": "public",
    "description": "Fetch the current total currency supply of the cluster in lamports  ",
    "lineNumber": 980,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "getInflation",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getInflation",
    "access": "public",
    "description": "Fetch the cluster Inflation parameters  ",
    "lineNumber": 994,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<GetInflationRpcResult>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "getEpochInfo",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getEpochInfo",
    "access": "public",
    "description": "Fetch the Epoch Info parameters  ",
    "lineNumber": 1008,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<GetEpochInfoRpcResult>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "getEpochSchedule",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getEpochSchedule",
    "access": "public",
    "description": "Fetch the Epoch Schedule parameters  ",
    "lineNumber": 1022,
    "return": {
      "nullable": null,
      "types": [
        "Promise<GetEpochScheduleRpcResult>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getMinimumBalanceForRentExemption",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getMinimumBalanceForRentExemption",
    "access": "public",
    "description": "Fetch the minimum balance needed to exempt an account of `dataLength`\nsize from rent  ",
    "lineNumber": 1036,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getRecentBlockhashAndContext",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getRecentBlockhashAndContext",
    "access": "public",
    "description": "Fetch a recent blockhash from the cluster  ",
    "lineNumber": 1057,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<RpcResponseAndContext<BlockhashAndFeeCalculator>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getRecentBlockhash",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getRecentBlockhash",
    "access": "public",
    "description": " ",
    "lineNumber": 1104,
    "params": [
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<BlockhashAndFeeCalculator>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getVersion",
    "access": "public",
    "description": "Fetch the node version  ",
    "lineNumber": 1117,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Version>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getConfirmedBlock",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#getConfirmedBlock",
    "access": "public",
    "description": "Fetch a list of Transactions and transaction statuses from the cluster\nfor a confirmed block  ",
    "lineNumber": 1131,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ConfirmedBlock>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "requestAirdrop",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#requestAirdrop",
    "access": "public",
    "description": "Request an allocation of lamports to the specified account  ",
    "lineNumber": 1153,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "sendTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendTransaction",
    "access": "public",
    "description": "Sign and send a transaction  ",
    "lineNumber": 1171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "validatorExit",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#validatorExit",
    "access": "private",
    "description": "  ",
    "lineNumber": 1238,
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "sendRawTransaction",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#sendRawTransaction",
    "access": "public",
    "description": "Send a transaction that has already been signed and serialized into the\nwire format  ",
    "lineNumber": 1252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "rawTransaction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "_wsOnOpen",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnOpen",
    "access": "private",
    "description": " ",
    "lineNumber": 1270,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "_wsOnError",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnError",
    "access": "private",
    "description": " ",
    "lineNumber": 1278,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_wsOnClose",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnClose",
    "access": "private",
    "description": " ",
    "lineNumber": 1285,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "_updateSubscriptions",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#_updateSubscriptions",
    "access": "private",
    "description": " ",
    "lineNumber": 1298,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_wsOnAccountNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnAccountNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 1381,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "onAccountChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onAccountChange",
    "access": "public",
    "description": "Register a callback to be invoked whenever the specified account changes  ",
    "lineNumber": 1412,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": "Public key of the account to monitor"
      },
      {
        "nullable": null,
        "types": [
          "AccountChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the account is changed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "removeAccountChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeAccountChangeListener",
    "access": "public",
    "description": "Deregister an account notification callback  ",
    "lineNumber": 1431,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_wsOnProgramAccountNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnProgramAccountNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 1451,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "onProgramAccountChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onProgramAccountChange",
    "access": "public",
    "description": "Register a callback to be invoked whenever accounts owned by the\nspecified program change  ",
    "lineNumber": 1488,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "Public key of the program to monitor"
      },
      {
        "nullable": null,
        "types": [
          "ProgramAccountChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the account is changed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "removeProgramAccountChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeProgramAccountChangeListener",
    "access": "public",
    "description": "Deregister an account notification callback  ",
    "lineNumber": 1507,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_wsOnSlotNotification",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_wsOnSlotNotification",
    "access": "private",
    "description": " ",
    "lineNumber": 1527,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "notification",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "onSlotChange",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#onSlotChange",
    "access": "public",
    "description": "Register a callback to be invoked upon slot changes  ",
    "lineNumber": 1555,
    "params": [
      {
        "nullable": null,
        "types": [
          "SlotChangeCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function to invoke whenever the slot changes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "subscription id"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "removeSlotChangeListener",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/connection.js~Connection#removeSlotChangeListener",
    "access": "public",
    "description": "Deregister a slot notification callback  ",
    "lineNumber": 1570,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "subscription id to deregister"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_argsWithCommitment",
    "memberof": "src/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/connection.js~Connection#_argsWithCommitment",
    "access": "private",
    "description": " ",
    "lineNumber": 1587,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "override",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<any>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/fee-calculator.js",
    "content": "// @flow\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n * @property {number} targetLamportsPerSignature\n * @property {number} targetSignaturesPerSlot\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n  targetSignaturesPerSlot: number,\n  targetLamportsPerSignature: number,\n};\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/fee-calculator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "typedef",
    "name": "FeeCalculator",
    "memberof": "src/fee-calculator.js",
    "static": true,
    "longname": "src/fee-calculator.js~FeeCalculator",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamportsPerSignature",
        "description": "lamports Cost in lamports to validate a signature"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLamportsPerSignature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetSignaturesPerSlot",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "FeeCalculator"
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/index.js",
    "content": "// @flow\nexport {Account} from './account';\nexport {BpfLoader} from './bpf-loader';\nexport {BudgetProgram} from './budget-program';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {PublicKey} from './publickey';\nexport {SystemInstruction, SystemProgram} from './system-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_ACCOUNT_KEY, VoteAccount} from './vote-account';\nexport {SYSVAR_RENT_PUBKEY} from './sysvar-rent';\nexport {\n  sendAndConfirmTransaction,\n  sendAndConfirmRecentTransaction,\n} from './util/send-and-confirm-transaction';\nexport {\n  sendAndConfirmRawTransaction,\n} from './util/send-and-confirm-raw-transaction';\nexport {testnetChannelEndpoint} from './util/testnet';\n\n// There are 2^34 lamports in one SOL\nexport const SOL_LAMPORTS = 17179869184;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "SOL_LAMPORTS",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~SOL_LAMPORTS",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SOL_LAMPORTS}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/layout.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/layout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "publicKey",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~publicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{publicKey}",
    "description": "Layout for a public key",
    "lineNumber": 8,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "publicKey",
        "defaultValue": "publicKey"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "uint64",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~uint64",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{uint64}",
    "description": "Layout for a 64bit unsigned value",
    "lineNumber": 15,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "uint64",
        "defaultValue": "uint64"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "rustString",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~rustString",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{rustString}",
    "description": "Layout for a Rust String type",
    "lineNumber": 22,
    "params": [
      {
        "name": "property",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "string",
        "defaultValue": "string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "getAlloc",
    "memberof": "src/layout.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout.js~getAlloc",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{getAlloc}",
    "description": " ",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/loader.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar-rent';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Math.ceil(dataLength / Loader.chunkSize);\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Array<number>,\n  ): Promise<PublicKey> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n      const transaction = SystemProgram.createAccount(\n        payer.publicKey,\n        program.publicKey,\n        balanceNeeded > 0 ? balanceNeeded : 1,\n        data.length,\n        programId,\n      );\n      await sendAndConfirmTransaction(connection, transaction, payer, program);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, payer, program),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(connection, transaction, payer, program);\n    }\n    return program.publicKey;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Loader",
    "memberof": "src/loader.js",
    "static": true,
    "longname": "src/loader.js~Loader",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Loader}",
    "description": "Program loader interface",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "get",
    "name": "chunkSize",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/loader.js~Loader.chunkSize",
    "access": "public",
    "description": "Amount of program data placed in each load Transaction ",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "getMinNumSignatures",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/loader.js~Loader.getMinNumSignatures",
    "access": "public",
    "description": "Minimum number of signatures required to load a program not including\nretries\n\nCan be used to calculate transaction fees  ",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataLength",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "load",
    "memberof": "src/loader.js~Loader",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/loader.js~Loader.load",
    "access": "public",
    "description": "Loads a generic program  ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection to use"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "payer",
        "description": "System account that pays to load the program"
      },
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "Account to load the program into"
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": "Public key that identifies the loader"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Program octets"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<PublicKey>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/publickey.js",
    "content": "// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PublicKey\n   */\n  static isPublicKey(o: Object): boolean {\n    return o instanceof PublicKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/publickey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "class",
    "name": "PublicKey",
    "memberof": "src/publickey.js",
    "static": true,
    "longname": "src/publickey.js~PublicKey",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PublicKey}",
    "description": "A public key",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_bn",
    "memberof": "src/publickey.js~PublicKey",
    "static": false,
    "longname": "src/publickey.js~PublicKey#_bn",
    "access": "private",
    "description": "",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "BN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#constructor",
    "access": "public",
    "description": "Create a new PublicKey object ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "Buffer",
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "isPublicKey",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/publickey.js~PublicKey.isPublicKey",
    "access": "public",
    "description": "Checks if the provided object is a PublicKey  ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "equals",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#equals",
    "access": "public",
    "description": "Checks if two publicKeys are equal  ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "toBase58",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBase58",
    "access": "public",
    "description": "Return the base-58 representation of the public key  ",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "toBuffer",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toBuffer",
    "access": "public",
    "description": "Return the Buffer representation of the public key  ",
    "lineNumber": 61,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "toString",
    "memberof": "src/publickey.js~PublicKey",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/publickey.js~PublicKey#toString",
    "access": "public",
    "description": "Returns a string representation of the public key  ",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/system-program.js",
    "content": "// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {PublicKey} from './publickey';\nimport * as Layout from './layout';\nimport type {TransactionInstructionCtorFields} from './transaction';\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction extends TransactionInstruction {\n  /**\n   * Type of SystemInstruction\n   */\n  type: SystemInstructionType;\n\n  constructor(\n    opts?: TransactionInstructionCtorFields,\n    type?: SystemInstructionType,\n  ) {\n    if (\n      opts &&\n      opts.programId &&\n      !opts.programId.equals(SystemProgram.programId)\n    ) {\n      throw new Error('programId incorrect; not a SystemInstruction');\n    }\n    super(opts);\n    if (type) {\n      this.type = type;\n    }\n  }\n\n  static from(instruction: TransactionInstruction): SystemInstruction {\n    if (!instruction.programId.equals(SystemProgram.programId)) {\n      throw new Error('programId incorrect; not SystemProgram');\n    }\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const t in SystemInstructionLayout) {\n      if (SystemInstructionLayout[t].index == typeIndex) {\n        type = SystemInstructionLayout[t];\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return new SystemInstruction(\n      {\n        keys: instruction.keys,\n        programId: instruction.programId,\n        data: instruction.data,\n      },\n      type,\n    );\n  }\n\n  /**\n   * The `from` public key of the instruction;\n   * returns null if SystemInstructionType does not support this field\n   */\n  get fromPublicKey(): PublicKey | null {\n    if (\n      this.type == SystemInstructionLayout.Create ||\n      this.type == SystemInstructionLayout.CreateWithSeed ||\n      this.type == SystemInstructionLayout.Transfer\n    ) {\n      return this.keys[0].pubkey;\n    }\n    return null;\n  }\n\n  /**\n   * The `to` public key of the instruction;\n   * returns null if SystemInstructionType does not support this field\n   */\n  get toPublicKey(): PublicKey | null {\n    if (\n      this.type == SystemInstructionLayout.Create ||\n      this.type == SystemInstructionLayout.CreateWithSeed ||\n      this.type == SystemInstructionLayout.Transfer\n    ) {\n      return this.keys[1].pubkey;\n    }\n    return null;\n  }\n\n  /**\n   * The `amount` or `lamports` of the instruction;\n   * returns null if SystemInstructionType does not support this field\n   */\n  get amount(): number | null {\n    const data = this.type.layout.decode(this.data);\n    if (this.type == SystemInstructionLayout.Transfer) {\n      return data.amount;\n    } else if (\n      this.type == SystemInstructionLayout.Create ||\n      this.type == SystemInstructionLayout.CreateWithSeed\n    ) {\n      return data.lamports;\n    }\n    return null;\n  }\n}\n\n/**\n * @typedef {Object} SystemInstructionType\n * @property (index} The System Instruction index (from solana-sdk)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\ntype SystemInstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * An enumeration of valid SystemInstructionTypes\n */\nconst SystemInstructionLayout = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('amount'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Populate a buffer of instruction data using the SystemInstructionType\n */\nfunction encodeData(type: SystemInstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(\n    from: PublicKey,\n    newAccount: PublicKey,\n    lamports: number,\n    space: number,\n    programId: PublicKey,\n  ): Transaction {\n    const type = SystemInstructionLayout.Create;\n    const data = encodeData(type, {\n      lamports,\n      space,\n      programId: programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: newAccount, isSigner: true, isWritable: true},\n      ],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(from: PublicKey, to: PublicKey, amount: number): Transaction {\n    const type = SystemInstructionLayout.Transfer;\n    const data = encodeData(type, {amount});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: to, isSigner: false, isWritable: true},\n      ],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(from: PublicKey, programId: PublicKey): Transaction {\n    const type = SystemInstructionLayout.Assign;\n    const data = encodeData(type, {programId: programId.toBuffer()});\n\n    return new Transaction().add({\n      keys: [{pubkey: from, isSigner: true, isWritable: true}],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    from: PublicKey,\n    newAccount: PublicKey,\n    seed: string,\n    lamports: number,\n    space: number,\n    programId: PublicKey,\n  ): Transaction {\n    const type = SystemInstructionLayout.CreateWithSeed;\n    const data = encodeData(type, {\n      seed,\n      lamports,\n      space,\n      programId: programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isWritable: true},\n        {pubkey: newAccount, isSigner: false, isWritable: true},\n      ],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/system-program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "SystemInstruction",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SystemInstruction}",
    "description": "System Instruction class",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/transaction.js~TransactionInstruction"
    ]
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "type",
    "memberof": "src/system-program.js~SystemInstruction",
    "static": false,
    "longname": "src/system-program.js~SystemInstruction#type",
    "access": "public",
    "description": "Type of SystemInstruction ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "SystemInstructionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system-program.js~SystemInstruction#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstructionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SystemInstructionType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "from",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemInstruction.from",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstruction"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SystemInstruction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "get",
    "name": "fromPublicKey",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system-program.js~SystemInstruction#fromPublicKey",
    "access": "public",
    "description": "The `from` public key of the instruction;\nreturns null if SystemInstructionType does not support this field ",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "get",
    "name": "toPublicKey",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system-program.js~SystemInstruction#toPublicKey",
    "access": "public",
    "description": "The `to` public key of the instruction;\nreturns null if SystemInstructionType does not support this field ",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "get",
    "name": "amount",
    "memberof": "src/system-program.js~SystemInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/system-program.js~SystemInstruction#amount",
    "access": "public",
    "description": "The `amount` or `lamports` of the instruction;\nreturns null if SystemInstructionType does not support this field ",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "typedef",
    "name": "SystemInstructionType",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemInstructionType",
    "access": "public",
    "description": "",
    "lineNumber": 115,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(index}",
        "description": "The System Instruction index (from solana-sdk)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(BufferLayout}",
        "description": "The BufferLayout to use to build data"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SystemInstructionType"
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "SystemInstructionLayout",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemInstructionLayout",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "An enumeration of valid SystemInstructionTypes",
    "lineNumber": 123,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "encodeData",
    "memberof": "src/system-program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~encodeData",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Populate a buffer of instruction data using the SystemInstructionType  ",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "SystemInstructionType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "class",
    "name": "SystemProgram",
    "memberof": "src/system-program.js",
    "static": true,
    "longname": "src/system-program.js~SystemProgram",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SystemProgram}",
    "description": "Factory class for transactions to interact with the System program",
    "lineNumber": 174,
    "interface": false
  },
  {
    "__docId__": 226,
    "kind": "get",
    "name": "programId",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.programId",
    "access": "public",
    "description": "Public key that identifies the System program ",
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "createAccount",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createAccount",
    "access": "public",
    "description": "Generate a Transaction that creates a new account  ",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAccount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "transfer",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.transfer",
    "access": "public",
    "description": "Generate a Transaction that transfers lamports from one account to another  ",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "assign",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.assign",
    "access": "public",
    "description": "Generate a Transaction that assigns an account to a program  ",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "createAccountWithSeed",
    "memberof": "src/system-program.js~SystemProgram",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/system-program.js~SystemProgram.createAccountWithSeed",
    "access": "public",
    "description": "Generate a Transaction that creates a new account at\n  an address generated with `from`, a seed, and programId  ",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "newAccount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lamports",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/sysvar-rent.js",
    "content": "// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/sysvar-rent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "SYSVAR_RENT_PUBKEY",
    "memberof": "src/sysvar-rent.js",
    "static": true,
    "longname": "src/sysvar-rent.js~SYSVAR_RENT_PUBKEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{SYSVAR_RENT_PUBKEY}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/timing.js",
    "content": "// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 10;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 8;\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/timing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "NUM_TICKS_PER_SECOND",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~NUM_TICKS_PER_SECOND",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{NUM_TICKS_PER_SECOND}",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "DEFAULT_TICKS_PER_SLOT",
    "memberof": "src/timing.js",
    "static": true,
    "longname": "src/timing.js~DEFAULT_TICKS_PER_SLOT",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{DEFAULT_TICKS_PER_SLOT}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/transaction.js",
    "content": "// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Array(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst PUBKEY_LENGTH = 32;\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<{pubkey: PublicKey, isSigner: boolean, isWritable: boolean}>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<{\n    pubkey: PublicKey,\n    isSigner: boolean,\n    isWritable: boolean,\n  }> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property (?recentBlockhash} A recent block hash\n * @property (?signatures} One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if (item instanceof TransactionInstruction) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _getSignData(): Buffer {\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    const keys = this.signatures.map(({publicKey}) => publicKey.toString());\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    const programIds = [];\n\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(keySignerPair => {\n        const keyStr = keySignerPair.pubkey.toString();\n        if (!keys.includes(keyStr)) {\n          if (keySignerPair.isSigner) {\n            this.signatures.push({\n              signature: null,\n              publicKey: keySignerPair.pubkey,\n            });\n            if (!keySignerPair.isWritable) {\n              numReadonlySignedAccounts += 1;\n            }\n          } else {\n            if (!keySignerPair.isWritable) {\n              numReadonlyUnsignedAccounts += 1;\n            }\n          }\n          keys.push(keyStr);\n        }\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    programIds.forEach(programId => {\n      if (!keys.includes(programId)) {\n        keys.push(programId);\n        numReadonlyUnsignedAccounts += 1;\n      }\n    });\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    const instructions = this.instructions.map(instruction => {\n      const {data, programId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        programIdIndex: keys.indexOf(programId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), keys.length, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      numReadonlySignedAccounts: Buffer.from([numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PublicKey(key).toBuffer()),\n      recentBlockhash: Buffer.from(bs58.decode(recentBlockhash)),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const publicKey =\n          accountOrPublicKey instanceof Account\n            ? accountOrPublicKey.publicKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          publicKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._getSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PublicKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.secretKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.publicKey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.publicKey.toString()}`);\n    }\n\n    const signData = this._getSignData();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._getSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(signature);\n    }\n\n    const numRequiredSignatures = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte\n    const numReadonlySignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numReadonlySignedAccounts byte\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numReadonlyUnsignedAccounts byte\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(account);\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      instruction.data = byteArray.slice(0, dataLength);\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    return Transaction._populate(\n      signatures,\n      accounts,\n      instructions,\n      recentBlockhash,\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    );\n  }\n\n  /**\n   * Parse an RPC result into a Transaction object.\n   */\n  static fromRpcResult(rpcResult: any): Transaction {\n    const signatures = rpcResult.signatures.slice(1);\n    const accounts = rpcResult.message.accountKeys.slice(1);\n    const instructions = rpcResult.message.instructions.slice(1).map(ix => {\n      ix.accounts.shift();\n      ix.data.shift();\n      return ix;\n    });\n    const recentBlockhash = rpcResult.message.recentBlockhash;\n    const numRequiredSignatures =\n      rpcResult.message.header.numRequiredSignatures;\n    const numReadonlySignedAccounts =\n      rpcResult.message.header.numReadonlySignedAccounts;\n    const numReadonlyUnsignedAccounts =\n      rpcResult.message.header.numReadonlyUnsignedAccounts;\n    return Transaction._populate(\n      signatures,\n      accounts,\n      instructions,\n      recentBlockhash,\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    );\n  }\n\n  /**\n   * Populate Transaction object\n   * @private\n   */\n  static _populate(\n    signatures: Array<Array<number>>,\n    accounts: Array<Array<number>>,\n    instructions: Array<any>,\n    recentBlockhash: Array<number>,\n    numRequiredSignatures: number,\n    numReadonlySignedAccounts: number,\n    numReadonlyUnsignedAccounts: number,\n  ): Transaction {\n    function isWritable(\n      i: number,\n      numRequiredSignatures: number,\n      numReadonlySignedAccounts: number,\n      numReadonlyUnsignedAccounts: number,\n      numKeys: number,\n    ): boolean {\n      return (\n        i < numRequiredSignatures - numReadonlySignedAccounts ||\n        (i >= numRequiredSignatures &&\n          i < numKeys - numReadonlyUnsignedAccounts)\n      );\n    }\n\n    const transaction = new Transaction();\n    transaction.recentBlockhash = new PublicKey(recentBlockhash).toBase58();\n    for (let i = 0; i < signatures.length; i++) {\n      const sigPubkeyPair = {\n        signature:\n          signatures[i].toString() == DEFAULT_SIGNATURE.toString()\n            ? null\n            : Buffer.from(signatures[i]),\n        publicKey: new PublicKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      let instructionData = {\n        keys: [],\n        programId: new PublicKey(accounts[instructions[i].programIndex]),\n        data: Buffer.from(instructions[i].data),\n      };\n      for (let j = 0; j < instructions[i].accounts.length; j++) {\n        const pubkey = new PublicKey(accounts[instructions[i].accounts[j]]);\n\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: isWritable(\n            j,\n            numRequiredSignatures,\n            numReadonlySignedAccounts,\n            numReadonlyUnsignedAccounts,\n            accounts.length,\n          ),\n        });\n      }\n      let instruction = new TransactionInstruction(instructionData);\n      transaction.instructions.push(instruction);\n    }\n    return transaction;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "typedef",
    "name": "TransactionSignature",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionSignature",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TransactionSignature"
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "DEFAULT_SIGNATURE",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~DEFAULT_SIGNATURE",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "Default (empty) signature\n\nSignatures are 64 bytes in length",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "PACKET_DATA_SIZE",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~PACKET_DATA_SIZE",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{PACKET_DATA_SIZE}",
    "description": "Maximum over-the-wire size of a Transaction\n\n1280 is IPv6 minimum MTU\n40 bytes is the size of the IPv6 header\n8 bytes is the size of the fragment header",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "PUBKEY_LENGTH",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~PUBKEY_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "SIGNATURE_LENGTH",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~SIGNATURE_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "typedef",
    "name": "TransactionInstructionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstructionCtorFields",
    "access": "public",
    "description": "List of TransactionInstruction object fields that may be initialized at construction",
    "lineNumber": 46,
    "properties": [
      {
        "nullable": true,
        "types": [
          "Array<PublicKey>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "programId",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionInstructionCtorFields"
    }
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "TransactionInstruction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionInstruction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{TransactionInstruction}",
    "description": "Transaction Instruction class",
    "lineNumber": 55,
    "interface": false
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "keys",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#keys",
    "access": "public",
    "description": "Public keys to include in this transaction\nBoolean represents whether this pubkey needs to sign the transaction ",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Array<object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "programId",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#programId",
    "access": "public",
    "description": "Program Id to execute ",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "data",
    "memberof": "src/transaction.js~TransactionInstruction",
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#data",
    "access": "public",
    "description": "Program input ",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~TransactionInstruction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~TransactionInstruction#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionInstructionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "typedef",
    "name": "TransactionCtorFields",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~TransactionCtorFields",
    "access": "public",
    "description": "List of Transaction object fields that may be initialized at construction",
    "lineNumber": 97,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(?recentBlockhash}",
        "description": "A recent block hash"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "(?signatures}",
        "description": "One or more signatures"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransactionCtorFields"
    }
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "Transaction",
    "memberof": "src/transaction.js",
    "static": true,
    "longname": "src/transaction.js~Transaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{Transaction}",
    "description": "Transaction class",
    "lineNumber": 105,
    "interface": false
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "signatures",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#signatures",
    "access": "public",
    "description": "Signatures for the transaction.  Typically created by invoking the\n`sign()` method ",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Array<SignaturePubkeyPair>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "get",
    "name": "signature",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#signature",
    "access": "public",
    "description": "The first (payer) Transaction signature ",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "Buffer",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "instructions",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#instructions",
    "access": "public",
    "description": "The instructions to atomically execute ",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "Array<TransactionInstruction>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "recentBlockhash",
    "memberof": "src/transaction.js~Transaction",
    "static": false,
    "longname": "src/transaction.js~Transaction#recentBlockhash",
    "access": "public",
    "description": "A recent transaction id.  Must be populated by the caller ",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "Blockhash",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#constructor",
    "access": "public",
    "description": "Construct an empty Transaction ",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "TransactionCtorFields"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "add",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#add",
    "access": "public",
    "description": "Add one or more instructions to this Transaction  ",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Transaction|TransactionInstruction|TransactionInstructionCtorFields>"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "_getSignData",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#_getSignData",
    "access": "private",
    "description": "  ",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "sign",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#sign",
    "access": "public",
    "description": "Sign the Transaction with the specified accounts.  Multiple signatures may\nbe applied to a Transaction. The first signature is considered \"primary\"\nand is used when testing for Transaction confirmation.\n\nTransaction fields should not be modified after the first call to `sign`,\nas doing so may invalidate the signature and cause the Transaction to be\nrejected.\n\nThe Transaction must be assigned a valid `recentBlockhash` before invoking this method ",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "signers",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "signPartial",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#signPartial",
    "access": "public",
    "description": "Partially sign a Transaction with the specified accounts.  The `Account`\ninputs will be used to sign the Transaction immediately, while any\n`PublicKey` inputs will be referenced in the signed Transaction but need to\nbe filled in later by calling `addSigner()` with the matching `Account`.\n\nAll the caveats from the `sign` method apply to `signPartial` ",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<PublicKey|Account>"
        ],
        "spread": true,
        "optional": false,
        "name": "partialSigners",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "addSigner",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#addSigner",
    "access": "public",
    "description": "Fill in a signature for a partially signed Transaction.  The `signer` must\nbe the corresponding `Account` for a `PublicKey` that was previously provided to\n`signPartial` ",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "Account"
        ],
        "spread": false,
        "optional": false,
        "name": "signer",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#serialize",
    "access": "public",
    "description": "Serialize the Transaction in the wire format.\n\nThe Transaction must have a valid `signature` before invoking this method  ",
    "lineNumber": 383,
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 263,
    "kind": "get",
    "name": "keys",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#keys",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 421,
    "type": {
      "nullable": null,
      "types": [
        "Array<PublicKey>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "get",
    "name": "programId",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#programId",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "get",
    "name": "data",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/transaction.js~Transaction#data",
    "access": "private",
    "description": "Deprecated method ",
    "lineNumber": 439,
    "type": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "from",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transaction.js~Transaction.from",
    "access": "public",
    "description": "Parse a wire transaction into a Transaction object.  ",
    "lineNumber": 447,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "fromRpcResult",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transaction.js~Transaction.fromRpcResult",
    "access": "public",
    "description": "Parse an RPC result into a Transaction object.  ",
    "lineNumber": 505,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "rpcResult",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "_populate",
    "memberof": "src/transaction.js~Transaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/transaction.js~Transaction._populate",
    "access": "private",
    "description": "Populate Transaction object  ",
    "lineNumber": 535,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "signatures",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "accounts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "instructions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "recentBlockhash",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numRequiredSignatures",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numReadonlySignedAccounts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numReadonlyUnsignedAccounts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/util/send-and-confirm-raw-transaction.js",
    "content": "// @flow\n\nimport {Connection} from '../connection';\nimport type {Commitment} from '../connection';\nimport {sleep} from './sleep';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  commitment: ?Commitment,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  let signature = await connection.sendRawTransaction(rawTransaction);\n\n  // Wait up to a couple slots for a confirmation\n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.getSignatureStatus(signature, commitment);\n    if (status) {\n      break;\n    }\n\n    // Sleep for approximately half a slot\n    await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-raw-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "sendAndConfirmRawTransaction",
    "memberof": "src/util/send-and-confirm-raw-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-raw-transaction.js~sendAndConfirmRawTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmRawTransaction}",
    "description": "Sign, send and confirm a raw transaction",
    "lineNumber": 12,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawTransaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "commitment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/util/send-and-confirm-transaction.js",
    "content": "// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport type {Commitment} from '../connection';\nimport {Transaction} from '../transaction';\nimport {sleep} from './sleep';\nimport type {Account} from '../account';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a transaction with recent commitment level\n */\nexport async function sendAndConfirmRecentTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return await _sendAndConfirmTransaction(\n    connection,\n    transaction,\n    signers,\n    'recent',\n  );\n}\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return await _sendAndConfirmTransaction(connection, transaction, signers);\n}\n\nasync function _sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  commitment: ?Commitment,\n): Promise<TransactionSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTransaction(transaction, ...signers);\n\n    // Wait up to a couple slots for a confirmation\n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.getSignatureStatus(signature, commitment);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // Sleep for approximately half a slot\n      await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // Retry in 0..100ms to try to avoid another AccountInUse collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/send-and-confirm-transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "sendAndConfirmRecentTransaction",
    "memberof": "src/util/send-and-confirm-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-transaction.js~sendAndConfirmRecentTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmRecentTransaction}",
    "description": "Sign, send and confirm a transaction with recent commitment level",
    "lineNumber": 16,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "signers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "sendAndConfirmTransaction",
    "memberof": "src/util/send-and-confirm-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-transaction.js~sendAndConfirmTransaction",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sendAndConfirmTransaction}",
    "description": "Sign, send and confirm a transaction",
    "lineNumber": 32,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "transaction",
        "types": [
          "*"
        ]
      },
      {
        "name": "signers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "_sendAndConfirmTransaction",
    "memberof": "src/util/send-and-confirm-transaction.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/util/send-and-confirm-transaction.js~_sendAndConfirmTransaction",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": " ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Transaction"
        ],
        "spread": false,
        "optional": false,
        "name": "transaction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Account>"
        ],
        "spread": false,
        "optional": false,
        "name": "signers",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Commitment"
        ],
        "spread": false,
        "optional": false,
        "name": "commitment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<TransactionSignature>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/util/shortvec-encoding.js",
    "content": "// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/shortvec-encoding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "decodeLength",
    "memberof": "src/util/shortvec-encoding.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/shortvec-encoding.js~decodeLength",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{decodeLength}",
    "description": " ",
    "lineNumber": 3,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "encodeLength",
    "memberof": "src/util/shortvec-encoding.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/shortvec-encoding.js~encodeLength",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{encodeLength}",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "len",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "src/util/sleep.js",
    "content": "// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/sleep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "sleep",
    "memberof": "src/util/sleep.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/sleep.js~sleep",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{sleep}",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/util/testnet.js",
    "content": "//@flow\n\nimport {testnetDefaultChannel} from '../../package.json';\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    edge: 'http://edge.testnet.solana.com:8899',\n    beta: 'http://beta.testnet.solana.com:8899',\n    stable: 'http://testnet.solana.com:8899',\n  },\n  https: {\n    edge: 'https://edge.testnet.solana.com:8443',\n    beta: 'https://beta.testnet.solana.com:8443',\n    stable: 'https://testnet.solana.com:8443',\n  },\n};\n\n/**\n * Retrieves the RPC endpoint URL for the specified testnet release\n * channel\n */\nexport function testnetChannelEndpoint(\n  channel?: string,\n  tls?: boolean,\n): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!channel) {\n    return endpoint[key][testnetDefaultChannel];\n  }\n\n  const url = endpoint[key][channel];\n  if (!url) {\n    throw new Error(`Unknown ${key} channel: ${channel}`);\n  }\n  return url;\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/util/testnet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "endpoint",
    "memberof": "src/util/testnet.js",
    "static": true,
    "longname": "src/util/testnet.js~endpoint",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "{\"http\": *, \"https\": *}"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "testnetChannelEndpoint",
    "memberof": "src/util/testnet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/testnet.js~testnetChannelEndpoint",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{testnetChannelEndpoint}",
    "description": "Retrieves the RPC endpoint URL for the specified testnet release\nchannel",
    "lineNumber": 25,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      },
      {
        "name": "tls",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "src/validator-info.js",
    "content": "// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer: Buffer): ?ValidatorInfo {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/validator-info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "VALIDATOR_INFO_KEY",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~VALIDATOR_INFO_KEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VALIDATOR_INFO_KEY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "typedef",
    "name": "Info",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~Info",
    "access": "public",
    "description": "Info used to identity validators.",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "validator name"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "website",
        "description": "optional, validator website"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "optional, extra information the validator chose to share"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keybaseUsername",
        "description": "optional, used to identify validators on keybase.io"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Info"
    }
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "InfoString",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~InfoString",
    "access": "public",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "class",
    "name": "ValidatorInfo",
    "memberof": "src/validator-info.js",
    "static": true,
    "longname": "src/validator-info.js~ValidatorInfo",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{ValidatorInfo}",
    "description": "ValidatorInfo class",
    "lineNumber": 47,
    "interface": false
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "key",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#key",
    "access": "public",
    "description": "validator public key ",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "info",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#info",
    "access": "public",
    "description": "validator information ",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Info"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validator-info.js~ValidatorInfo#constructor",
    "access": "public",
    "description": "Construct a valid ValidatorInfo ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "PublicKey"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "validator public key"
      },
      {
        "nullable": null,
        "types": [
          "Info"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "validator information"
      }
    ]
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "fromConfigData",
    "memberof": "src/validator-info.js~ValidatorInfo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validator-info.js~ValidatorInfo.fromConfigData",
    "access": "public",
    "description": "Deserialize ValidatorInfo from the config account data. Exactly two config\nkeys are required in the data.  ",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "config account data"
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "ValidatorInfo"
      ],
      "spread": false,
      "description": "null if info was not found"
    }
  },
  {
    "__docId__": 294,
    "kind": "file",
    "name": "src/vote-account.js",
    "content": "// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\n\nexport const VOTE_ACCOUNT_KEY = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer: Buffer): VoteAccount {\n    const va = VoteAccountLayout.decode(buffer, 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/solana-labs/solana-web3.js/src/vote-account.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "name": "VOTE_ACCOUNT_KEY",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VOTE_ACCOUNT_KEY",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VOTE_ACCOUNT_KEY}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "src/publickey.js~PublicKey"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "variable",
    "name": "VoteAccountLayout",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VoteAccountLayout",
    "access": "private",
    "export": false,
    "importPath": "@solana/web3",
    "importStyle": null,
    "description": "See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "class",
    "name": "VoteAccount",
    "memberof": "src/vote-account.js",
    "static": true,
    "longname": "src/vote-account.js~VoteAccount",
    "access": "public",
    "export": true,
    "importPath": "@solana/web3",
    "importStyle": "{VoteAccount}",
    "description": "VoteAccount class",
    "lineNumber": 64,
    "interface": false
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "nodePubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#nodePubkey",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "authorizedVoterPubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#authorizedVoterPubkey",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "authorizedWithdrawerPubkey",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#authorizedWithdrawerPubkey",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "PublicKey"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "commission",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#commission",
    "access": "public",
    "description": "",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "votes",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#votes",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Array<Lockout>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "rootSlot",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#rootSlot",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "nullliteral"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "epoch",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#epoch",
    "access": "public",
    "description": "",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "credits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#credits",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "lastEpochCredits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#lastEpochCredits",
    "access": "public",
    "description": "",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "epochCredits",
    "memberof": "src/vote-account.js~VoteAccount",
    "static": false,
    "longname": "src/vote-account.js~VoteAccount#epochCredits",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Array<EpochCredits>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "fromAccountData",
    "memberof": "src/vote-account.js~VoteAccount",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vote-account.js~VoteAccount.fromAccountData",
    "access": "public",
    "description": "Deserialize VoteAccount from the account data.  ",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "buffer",
        "description": "account data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VoteAccount"
      ],
      "spread": false,
      "description": "VoteAccount"
    }
  },
  {
    "kind": "index",
    "content": "[![Build status][travis-image]][travis-url]\n[![codecov][codecov-image]][codecov-url]\n[![esdoc][esdoc-image]][esdoc-url]\n<br>\n[![npm][npm-image]][npm-url]\n[![npm-downloads][npm-downloads-image]][npm-url]\n[![david][david-deps-image]][david-deps-url]\n[![david][david-dev-deps-image]][david-dev-deps-url]\n<br>\n[![semantic-release][semantic-release-image]][semantic-release-url]\n[![code-style-prettier][code-style-prettier-image]][code-style-prettier-url]\n\n[travis-image]: https://api.travis-ci.org/solana-labs/solana-web3.js.svg?branch=master\n[travis-url]: https://travis-ci.org/solana-labs/solana-web3.js\n[codecov-image]: https://codecov.io/gh/solana-labs/solana-web3.js/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/solana-labs/solana-web3.js\n[esdoc-image]: https://solana-labs.github.io/solana-web3.js/badge.svg\n[npm-image]: https://img.shields.io/npm/v/@solana/web3.js.svg?style=flat\n[npm-downloads-image]: https://img.shields.io/npm/dm/@solana/web3.js.svg?style=flat\n[esdoc-url]: https://solana-labs.github.io/solana-web3.js/\n[npm-url]: https://www.npmjs.com/package/@solana/web3.js\n[david-deps-image]: https://david-dm.org/solana-labs/solana-web3.js.svg\n[david-deps-url]: https://david-dm.org/solana-labs/solana-web3.js\n[david-dev-deps-image]: https://david-dm.org/solana-labs/solana-web3.js/dev-status.svg\n[david-dev-deps-url]: https://david-dm.org/solana-labs/solana-web3.js?type=dev\n[semantic-release-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-release-url]: https://github.com/semantic-release/semantic-release\n[code-style-prettier-image]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square\n[code-style-prettier-url]: https://github.com/prettier/prettier\n\n# Solana JavaScript API\n\nThis is the Solana Javascript API built on the Solana [JSON RPC API](https://docs.solana.com/book/api-reference/jsonrpc-api)\n\n[Latest API Documentation](https://solana-labs.github.io/solana-web3.js/)\n\n\n## Installation\n\n### Yarn\n```\n$ yarn add @solana/web3.js\n```\n\n### npm\n```\n$ npm install --save @solana/web3.js\n```\n\n### Browser bundle\n```html\n<script src=\"https://github.com/solana-labs/solana-web3.js/releases/download/v0.0.6/solanaWeb3.min.js\"></script>\n```\n\n### BPF program development\nThe Solana BPF SDK is located in the `bpf-sdk/` subdirectory if you installed\nsolana-web3.js from npmjs.com.\n\nFrom a git clone, run `npm run bpf-sdk:install` to fetch the latest BPF SDK.\n\nAdditionally Rust must be installed to build Rust BPF programs such as\n`examples/bpf-rust-noop/`.  See https://www.rust-lang.org/install.html for\ninstallation details.\n\n## Usage\n\n### Javascript\n```js\nconst solanaWeb3 = require('@solana/web3.js');\nconsole.log(solanaWeb3);\n```\n\n### ES6\n```js\nimport solanaWeb3 from '@solana/web3.js';\nconsole.log(solanaWeb3);\n```\n\n### Browser bundle\n```js\n// `solanaWeb3` is provided in the global namespace by the `solanaWeb3.min.js` script bundle.\nconsole.log(solanaWeb3);\n```\n\n## Local Network\nThe `solana-localnet` program is provided to easily start a test Solana cluster\nlocally on your machine.  Docker must be installed.  The JSON RPC endpoint of\nthe local cluster is `http://localhost:8899`.\n\nTo start, first fetch the latest Docker image by running:\n```bash\n$ npx solana-localnet update\n```\n\nThen run the following command to start the cluster\n```bash\n$ npx solana-localnet up\n```\n\nWhile the cluster is running logs are available with:\n```bash\n$ npx solana-localnet logs -f\n```\n\nStop the cluster with:\n```bash\n$ npx solana-localnet down\n```\n\n## Flow\n\nA [Flow library definition](https://flow.org/en/docs/libdefs/) is provided at\n[module.flow.js](https://github.com/solana-labs/solana-web3.js/tree/master/module.flow.js).\nAdd the following line under the [libs] section of your project's .flowconfig to\nactivate it:\n```ini\n[libs]\nnode_modules/@solana/web3.js/module.flow.js\n```\n\n## Examples\nSee the [examples/](https://github.com/solana-labs/solana-web3.js/tree/master/examples) directory for small snippets.\n\nStandalone examples:\n* Message feed (BPF Rust and C): https://github.com/solana-labs/example-messagefeed\n* Tic-tac-toe (BPF C): https://github.com/solana-labs/example-tictactoe\n* Web wallet: https://github.com/solana-labs/example-webwallet\n\n## Releases\nReleases are available on [Github](https://github.com/solana-labs/solana-web3.js/releases)\nand [npmjs.com](https://www.npmjs.com/package/@solana/web3.js)\n\nEach Github release features a tarball containing API documentation and a\nminified version of the module suitable for direct use in a browser environment\n(&lt;script&gt; tag)\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@solana/web3.js\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"Solana Javascript API\",\n  \"keywords\": [\n    \"api\",\n    \"blockchain\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"Solana Maintainers <maintainers@solana.com>\",\n  \"homepage\": \"https://solana.com/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/solana-labs/solana-web3.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"http://github.com/solana-labs/solana-web3.js.git/issues\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.cjs.js\",\n  \"module\": \"lib/index.esm.js\",\n  \"bin\": {\n    \"solana-bpf-sdk-install\": \"bin/bpf-sdk-install.sh\",\n    \"solana-localnet\": \"bin/localnet.sh\"\n  },\n  \"testnetDefaultChannel\": \"edge\",\n  \"files\": [\n    \"/bin\",\n    \"/doc\",\n    \"/examples\",\n    \"/bpf-sdk\",\n    \"/lib\",\n    \"/module.flow.js\",\n    \"/src\"\n  ],\n  \"scripts\": {\n    \"bpf-sdk:install\": \"bin/bpf-sdk-install.sh\",\n    \"bpf-sdk:remove-symlinks\": \"find bpf-sdk -type l -print -exec cp {} {}.tmp \\\\; -exec mv {}.tmp {} \\\\;\",\n    \"build\": \"cross-env NODE_ENV=production rollup -c\",\n    \"build:fixtures\": \"./test/fixtures/noop-c/build.sh; ./test/fixtures/noop-rust/build.sh\",\n    \"clean\": \"rimraf ./coverage ./lib\",\n    \"codecov\": \"set -ex; npm run test:cover; cat ./coverage/lcov.info | codecov\",\n    \"dev\": \"cross-env NODE_ENV=development rollup -c\",\n    \"doc\": \"set -ex; esdoc; node -p '\\\"\\\\nDocumentation coverage: \\\" + require(\\\"./doc/coverage.json\\\").coverage'\",\n    \"doc:watch\": \"watch 'npm run doc' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"examples\": \"set -ex; for example in examples/*.js; do node $example; done\",\n    \"flow\": \"set -ex; flow stop; flow-typed install jest@24; flow\",\n    \"flow:stop\": \"flow stop\",\n    \"flow:watch\": \"flow stop; watch 'flow' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"lint\": \"set -ex; npm run pretty; eslint .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"lint:watch\": \"watch 'npm run lint:fix' . --wait=1 --ignoreDirectoryPattern=/doc/\",\n    \"localnet:down\": \"bin/localnet.sh down\",\n    \"localnet:logs\": \"bin/localnet.sh logs -f\",\n    \"localnet:up\": \"bin/localnet.sh up\",\n    \"localnet:update\": \"bin/localnet.sh update\",\n    \"ok\": \"run-s lint flow test doc\",\n    \"prepare\": \"run-s clean bpf-sdk:install bpf-sdk:remove-symlinks build\",\n    \"pretty\": \"prettier --write '{,{examples,src,test}/**/}*.js'\",\n    \"re\": \"semantic-release --repository-url git@github.com:solana-labs/solana-web3.js.git\",\n    \"test\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --useStderr\",\n    \"test:cover\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --coverage --useStderr\",\n    \"test:live\": \"npm run build:fixtures && cross-env NODE_ENV=test TEST_LIVE=1 jest --useStderr\",\n    \"test:watch\": \"npm run build:fixtures && cross-env NODE_ENV=test jest --watch --useStderr\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.3.1\",\n    \"bn.js\": \"^5.0.0\",\n    \"bs58\": \"^4.0.1\",\n    \"buffer-layout\": \"^1.2.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"jayson\": \"^3.0.1\",\n    \"mz\": \"^2.7.0\",\n    \"node-fetch\": \"^2.2.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"rpc-websockets\": \"^4.3.3\",\n    \"superstruct\": \"^0.7.0\",\n    \"tweetnacl\": \"^1.0.0\",\n    \"ws\": \"^7.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.3.3\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.3.3\",\n    \"@babel/plugin-proposal-function-bind\": \"^7.2.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.2.0\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-flow\": \"^7.0.0\",\n    \"@commitlint/config-conventional\": \"^8.0.0\",\n    \"@commitlint/travis-cli\": \"^8.0.0\",\n    \"acorn\": \"^7.0.0\",\n    \"babel-eslint\": \"10.0.3\",\n    \"babel-plugin-module-resolver\": \"3.2.0\",\n    \"codecov\": \"^3.0.4\",\n    \"cross-env\": \"6.0.3\",\n    \"elfy\": \"^0.1.0\",\n    \"enzyme\": \"3.10.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"6.5.1\",\n    \"eslint-config-prettier\": \"^6.0.0\",\n    \"eslint-plugin-import\": \"2.18.2\",\n    \"eslint-plugin-jest\": \"22.19.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"flow-bin\": \"0.109.0\",\n    \"flow-typed\": \"2.6.1\",\n    \"fs-file-tree\": \"1.0.7\",\n    \"jest\": \"24.9.0\",\n    \"marked\": \"^0.7.0\",\n    \"prettier\": \"^1.14.3\",\n    \"rimraf\": \"3.0.0\",\n    \"rollup\": \"1.15.2\",\n    \"rollup-plugin-babel\": \"^4.3.2\",\n    \"rollup-plugin-commonjs\": \"^10.0.0\",\n    \"rollup-plugin-json\": \"^4.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-globals\": \"^1.2.1\",\n    \"rollup-plugin-node-resolve\": \"5.2.0\",\n    \"rollup-plugin-replace\": \"2.2.0\",\n    \"rollup-plugin-terser\": \"^5.0.0\",\n    \"semantic-release\": \"^15.9.16\",\n    \"watch\": \"^1.0.2\"\n  }\n}\n",
    "longname": "/home/travis/build/solana-labs/solana-web3.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]